@using Pokemon.Components.Shared
@using Pokemon.Services.Interfaces
@using BlazorBootstrap
@inject IPokemonService client
@namespace Pokemon.Components.Shared

@if (IsModalOpen && SelectedPokemon != null)
{
    <div class="modal-overlay @(IsClosing ? "fade-out" : "")" @onclick="CloseModal">
        <div class="modal-content @(IsClosing ? "scale-out" : "")" @onclick:stopPropagation>
            <h2 class="modal-title">@SelectedPokemon.Name</h2>
            @if (@SelectedPokemon.Sprites.front_default != null) {
                <img class="modal-image" src="@SelectedPokemon.Sprites.front_default" alt="@SelectedPokemon.Name" />
            }
            else {
                <div class="no-picture-div">
                    <p>Picture not found</p>
                </div>
            }

            <ul class="stats-list">
                @foreach (var stat in SelectedPokemon.Stats)
                {
                    <li class="capitalize"><b>@stat.stat.name:</b> @stat.base_stat</li>
                    <Progress Class="mb-3">
                        <ProgressBar Type="ProgressType.Striped" Color="GetStatColor(stat.stat.name)" Width="Math.Min(stat.base_stat, 100)" />
                    </Progress>
                }
            </ul>

            <button class="close-btn" @onclick="CloseModal">Close</button>
        </div>
    </div>
}

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSelected { get; set; }

    private bool IsModalOpen = false;
    private bool IsClosing = false;
    private Models.Pokemon? SelectedPokemon;

    private ProgressColor GetStatColor(string statName)
    {
        return statName switch
        {
            "hp" => ProgressColor.Danger,
            "attack" => ProgressColor.Info,
            "defense" => ProgressColor.Warning,
            "speed" => ProgressColor.Success,
            "special-attack" => ProgressColor.Primary,
            "special-defense" => ProgressColor.Secondary,
            _ => ProgressColor.Dark
        };
    }

    private async Task CloseModal()
    {
        IsClosing = true;
        StateHasChanged();

        await Task.Delay(300);

        IsClosing = false;
        IsModalOpen = false;
        SelectedPokemon = null;

        if (OnClose.HasDelegate)
        {
            await OnClose.InvokeAsync();
        }

        StateHasChanged();
    }

    public async Task OpenModal(string name)
    {
        if (string.IsNullOrWhiteSpace(name)) return;

        var result = await client.GetPokemonByNameOrId(name.ToLower());

        if (result.IsSuccess && result.Data != null)
        {
            SelectedPokemon = result.Data;
            IsClosing = false;
            IsModalOpen = true;
        }
        else
        {
            Console.WriteLine($"Error fetching Pokemon '{name}': {result.ErrorMessage}");
            SelectedPokemon = null;
        }

        StateHasChanged();
    }

}
